(defpackage :user (:use :common-lisp))
(in-package :user)
(compile-file "procura.lisp" :print NIL)
(load "procura")
(compile-file "G001.lisp" :print NIL)
(load "G001")
(load "problems")

(defconstant strategies0 '("largura" "profundidade" "profundidade-iterativa" "ida*" "a*.melhor.heuristica" "a*.melhor.heuristica.alternativa" "sondagem.iterativa" "ILDS" "abordagem.alternativa"))
(defconstant strategies1 '("profundidade" "ida*" "a*.melhor.heuristica" "a*.melhor.heuristica.alternativa" "sondagem.iterativa" "ILDS" "abordagem.alternativa"))
(defconstant strategies4 '("a*.melhor.heuristica.alternativa" "sondagem.iterativa"))
(defconstant strategies5 '("sondagem.iterativa"))

(defun test (problem strategy)
    (let ((solution))
        (print strategy)
        (setf solution (faz-afectacao problem strategy :stats T))
        (format t "~%Solution length: ~D (problem length: ~D)~%" (length solution) (length problem))))

(defun test-problem (problem strategies)
    (format t "================================================================================")
    (format t "~%Testing: ~A~%" problem)
    (format t "================================================================================")
    (dolist (strategy strategies)
        (test (symbol-value problem) strategy)))

(test-problem 'p0 strategies0)
(test-problem 'p1 strategies1)
(test-problem 'p2 strategies1)
(test-problem 'p3 strategies1)
(test-problem 'p4 strategies4)
(test-problem 'p5 strategies5)

(dolist (problem '(p0 p1 p2 p3 p4 p5))
    (format t "================================================================================")
    (format t "~%Testing melhor.abordagem with: ~A~%" problem)
    (format t "================================================================================")
    (test (symbol-value problem) "melhor.abordagem"))
